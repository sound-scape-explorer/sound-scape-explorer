---
name: release
on:
  push:
    branches: [main]
jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      #############
      # preparing  #
      #############
      - name: checkout repository
        uses: actions/checkout@master
      - name: install node
        uses: actions/setup-node@master
        with:
          node-version: '20'
      - name: install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@main
      - name: install pnpm
        run: npm install -g pnpm
      - name: install project dependencies
        run: pnpm i

      ###################################
      # building visualisation services  #
      ###################################
      - name: install services dependencies
        run: pnpm install:front && pnpm install:audio
      - name: prebuild services
        run: pnpm front:build:electron && pnpm audio:build:electron

      #############################################
      # semantic-release dry run for next version  #
      #############################################
      - name: install semantic-release dependencies
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release/exec \
            @semantic-release/changelog \
            @semantic-release/npm \
            @qiwi/semantic-release-gh-pages-plugin \
            semantic-release-pypi
      - name: get next version
        run: semantic-release --dry-run
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      - name: store next version to env
        run: echo "NEXT_VERSION=$(cat .VERSION)" >> $GITHUB_ENV

      #########################################
      # update services' versions and rebuild  #
      #########################################
      - name: update versions
        run: bin/update-versions-linux.sh
      - name: build actual services
        run: pnpm visualisation:prebuild

      #######################################
      # building visualisation electron app  #
      #######################################
      - name: copy node bin to visualisation
        run: cp $(which node) visualisation/bin
      - name: copy ffmpeg bin to visualisation
        run: cp $(which ffmpeg) visualisation/bin
      - name: copy ffprobe bin to visualisation
        run: cp $(which ffprobe) visualisation/bin
      - name: install visualisation dependencies
        run: cd visualisation && npm i && cd ..
      - name: make visualisation binary
        run: cd visualisation && npm run make && cd ..
      - name: store visualisation binary
        uses: actions/upload-artifact@main
        with:
          name: visualisation-ubuntu
          path: visualisation/out/make/deb/x64/*.deb
  build-macos:
    runs-on: macos-latest
    steps:
      #############
      # preparing  #
      #############
      - name: checkout repository
        uses: actions/checkout@master
      - name: install node
        uses: actions/setup-node@master
        with:
          node-version: '20'
      - name: install python
        uses: actions/setup-python@master
        with:
          python-version: '3.10'
      - name: install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@main
      - name: install pnpm
        run: npm install -g pnpm
      - name: install project dependencies
        run: pnpm i

      ###################################
      # building visualisation services  #
      ###################################
      - name: install services dependencies
        run: pnpm install:front && pnpm install:audio
      - name: prebuild services
        run: pnpm front:build:electron && pnpm audio:build:electron

      #############################################
      # semantic-release dry run for next version  #
      #############################################
      - name: install semantic-release dependencies
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release/exec \
            @semantic-release/changelog \
            @semantic-release/npm \
            @qiwi/semantic-release-gh-pages-plugin \
            semantic-release-pypi
      - name: get next version
        run: semantic-release --dry-run
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      - name: store next version to env
        run: echo "NEXT_VERSION=$(cat .VERSION)" >> $GITHUB_ENV

      #########################################
      # update services' versions and rebuild  #
      #########################################
      - name: update versions
        run: bin/update-versions-macos.sh
      - name: build actual services
        run: pnpm visualisation:prebuild

      #######################################
      # building visualisation electron app  #
      #######################################
      - name: copy node bin to visualisation
        run: cp $(which node) visualisation/bin
      - name: copy ffmpeg bin to visualisation
        run: cp $(which ffmpeg) visualisation/bin
      - name: copy ffprobe bin to visualisation
        run: cp $(which ffprobe) visualisation/bin
      - name: install visualisation dependencies
        run: cd visualisation && npm i && cd ..
      - name: install macos additional dependencies
        run: cd visualisation && npm i -D appdmg && cd ..
      - name: make visualisation binary
        run: cd visualisation && npm run make && cd ..
      - name: store visualisation binary
        uses: actions/upload-artifact@main
        with:
          name: visualisation-macos
          path: visualisation/out/make/*.dmg
  build-windows:
    runs-on: windows-latest
    steps:
      #############
      # preparing  #
      #############
      - name: checkout repository
        uses: actions/checkout@master
      - name: install node
        uses: actions/setup-node@master
        with:
          node-version: '20'
      - name: install ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@main
      - name: install pnpm
        run: npm install -g pnpm
      - name: install project dependencies
        run: pnpm i

      ###################################
      # building visualisation services  #
      ###################################
      - name: install services dependencies
        run: pnpm install:front && pnpm install:audio
      - name: prebuild services
        run: pnpm front:build:electron && pnpm audio:build:electron

      #############################################
      # semantic-release dry run for next version  #
      #############################################
      - name: install semantic-release dependencies
        run: |
          npm install -g `
            semantic-release `
            @semantic-release/github `
            @semantic-release/git `
            @semantic-release/exec `
            @semantic-release/changelog `
            @semantic-release/npm `
            @qiwi/semantic-release-gh-pages-plugin `
            semantic-release-pypi
      - name: get next version
        run: semantic-release --dry-run
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      - name: store next version to env
        run: echo ("NEXT_VERSION=" + (cat .\.VERSION)).Trim() >> $env:GITHUB_ENV

      #########################################
      # update services' versions and rebuild  #
      #########################################
      - name: update versions
        run: .\bin\update-versions-windows.ps1
      - name: build actual services
        run: pnpm visualisation:prebuild:windows

      #######################################
      # building visualisation electron app  #
      #######################################
      - name: copy node bin to visualisation
        run: Copy-Item -Path $(Get-Command node).Path -Destination .\visualisation\bin
      - name: copy ffmpeg bin to visualisation
        run: Copy-Item -Path $(Get-Command ffmpeg).Path -Destination .\visualisation\bin
      - name: copy ffprobe bin to visualisation
        run: Copy-Item -Path $(Get-Command ffprobe).Path -Destination .\visualisation\bin
      - name: install visualisation dependencies
        run: cd visualisation && npm i && cd ..
      - name: make visualisation binary
        run: cd visualisation && npm run make && cd ..
      - name: store visualisation binary
        uses: actions/upload-artifact@main
        with:
          name: visualisation-windows
          path: visualisation\out\make\squirrel.windows\x64\*.exe
  release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-macos, build-windows]
    steps:
      #############
      # preparing  #
      #############
      - name: checkout repository
        uses: actions/checkout@master
      - name: install node
        uses: actions/setup-node@master
        with:
          node-version: '20'
      - name: install pnpm
        run: npm install -g pnpm
      - name: install project dependencies
        run: pnpm i
      - name: install front dependencies
        run: cd front && pnpm i --ignore-scripts --frozen-lockfile
      - name: generate dummy front build
        run: cd front && pnpm build:prod

      #########################################################
      # update next versions and build front for GitHub pages  #
      #########################################################
      - name: install release dependencies
        run: |
          npm install -g \
            semantic-release \
            @semantic-release/github \
            @semantic-release/git \
            @semantic-release/exec \
            @semantic-release/changelog \
            @semantic-release/npm \
            @qiwi/semantic-release-gh-pages-plugin \
            semantic-release-pypi
      - name: get next version
        run: semantic-release --dry-run
        env:
          GH_TOKEN: ${{ secrets.PAT }}
      - name: store next version to env
        run: echo "NEXT_VERSION=$(cat .VERSION)" >> $GITHUB_ENV
      - name: update modules versions to next version
        run: bin/update-versions-linux.sh
      - name: rebuild front package
        run: cd front && pnpm build:prod

      ###################################
      # retrieve visualisation binaries  #
      ###################################
      - name: download all visualisation binaries
        uses: actions/download-artifact@main
        with:
          pattern: visualisation-*
          path: visualisation-binaries
      - name: rename visualisation binaries
        run: |
          cd visualisation-binaries && \
          cd visualisation-ubuntu && \
          mv *.deb ../sound-scape-explorer-$(echo $NEXT_VERSION).deb && \
          cd .. && \
          cd visualisation-macos && \
          mv *.dmg ../sound-scape-explorer-$(echo $NEXT_VERSION).dmg && \
          cd .. && \
          cd visualisation-windows && \
          mv *.exe ../sound-scape-explorer-$(echo $NEXT_VERSION).exe
      - name: print content of visualisation binaries
        run: ls -lh visualisation-binaries
      - name: release
        run: semantic-release -b main
        env:
          GH_TOKEN: ${{ secrets.PAT }}
